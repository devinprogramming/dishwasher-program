<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Papa Parse for CSV processing -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
<div class="container">
    <h2 class="mb-4">Dienstplan Verwaltung</h2>

    <!-- Toasts container -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3" id="toastContainer"></div>

    <!-- Azubi Data Section - CHANGED: Now automatically loads from local file -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="card-title mb-0">Azubi Daten</h5>
        </div>
        <div class="card-body">
            <!-- CHANGED: Removed file input, added loading indicator -->
            <div id="loadingIndicator" class="alert alert-info">
                Lade Azubi-Daten...
            </div>
            <div id="loadAllAzubi" class="mt-3"></div>
        </div>
    </div>

    <!-- Plan Management -->
    <div class="d-flex mb-3 align-items-center">
        <button id="runUpdate" class="btn btn-primary me-3">🔄 Update Plan</button>
        <span id="lastUpdate">Letztes Update: <strong>-</strong></span>
    </div>

    <!-- Statistics -->
    <div id="statistics">
        <h4>Statistiken</h4>
        <h5 class="text-muted">Wie oft die Personen für ihren Dienst eingetragen sind.</h5>
        <canvas id="dutyChart" width="400" height="200"></canvas>
        <table class="table table-striped mt-3">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Dienst</th>
                    <th>Vertretung</th>
                    <th>Lehrjahr</th>
                </tr>
            </thead>
            <tbody id="statisticsTable"></tbody>
        </table>
    </div>

</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
$(document).ready(function () {

    function showToast(message, type = 'standard') {
        const ToastType = {
            STANDARD: 'bg-primary',
            ERROR: 'bg-danger',
            WARNING: 'bg-warning',
            SUCCESS: 'bg-success'
        };

        var toastElement = $('<div>', { 
                class: `toast align-items-center text-white ${ToastType[type.toUpperCase()] || ToastType.STANDARD} border-0`, 
                role: 'alert', 
                'aria-live': 'assertive', 
                'aria-atomic': 'true' 
            })
            .append(
                $('<div>', { class: 'd-flex w-100' })
                    .append(
                        $('<div>', { class: 'toast-body flex-grow-1', css: { 'word-wrap': 'break-word', 'overflow-wrap': 'break-word' } }).text(message),
                        $('<button>', { type: 'button', class: 'btn-close btn-close-white me-2 m-auto', 'data-bs-dismiss': 'toast', 'aria-label': 'Close' })
                    )
            );

        $('#toastContainer').append(toastElement);

        var toast = new bootstrap.Toast(toastElement[0]);
        toast.show();

        setTimeout(function () {
            toast.hide();
            toastElement.remove();
        }, 10000);
    }

    // CHANGED: Completely replaced CSV loading functionality
    // Now automatically loads from local file path
    function loadLocalCSV() {
        const csvPath = '../data/Azubis.csv'; // CHANGED: Fixed path to local CSV file
        
        // CHANGED: Using Papa Parse to fetch and parse the local CSV file
        Papa.parse(csvPath, {
            download: true, // CHANGED: Enable file download from URL
            delimiter: ';', // CHANGED: Set delimiter to semicolon for German CSV format
            header: true,
            skipEmptyLines: true,
            complete: function(results) {
                // CHANGED: Hide loading indicator when data is loaded
                $('#loadingIndicator').hide();
                
                if (results.errors.length > 0) {
                    showToast('Fehler beim Lesen der CSV-Datei', 'error');
                    console.error('CSV Errors:', results.errors);
                    return;
                }
                
                if (results.data.length === 0) {
                    showToast('Keine Daten in der CSV-Datei gefunden', 'warning');
                    return;
                }
                
                displayAzubis(results.data);
                showToast(`${results.data.length} Azubis erfolgreich geladen`, 'success');
            },
            error: function(error) {
                // CHANGED: Hide loading indicator on error too
                $('#loadingIndicator').hide();
                showToast('Fehler beim Laden der CSV-Datei: ' + error.message, 'error');
                console.error('CSV Load Error:', error);
            }
        });
    }

    // CHANGED: Updated display function to handle specific CSV structure
    function displayAzubis(azubiData) {
        const container = $('#loadAllAzubi');
        container.empty();

        // CHANGED: Create table with specific columns from CSV structure
        const table = $('<table>').addClass('table table-striped table-hover');
        
        // CHANGED: Create header with specific columns from your CSV
        const thead = $('<thead>').addClass('table-dark');
        const headerRow = $('<tr>');
        
        // CHANGED: Explicitly define headers based on your CSV structure
        headerRow.append(
            $('<th>').text('Vorname'),
            $('<th>').text('Nachname'), 
            $('<th>').text('Lehrjahr')
            // CHANGED: Ignore column is not displayed as per requirements
        );
        headerRow.append($('<th>').text('Aktion'));
        thead.append(headerRow);
        
        // Create table body
        const tbody = $('<tbody>');
        
        azubiData.forEach((azubi, index) => {
            // CHANGED: Only use relevant columns, ignore the "Ignorieren" column
            const row = $('<tr>').attr('id', `azubi-${index}`);
            
            // CHANGED: Add specific cells based on CSV structure
            row.append(
                $('<td>').text(azubi.Vorname || ''),
                $('<td>').text(azubi.Nachname || ''),
                $('<td>').text(azubi.Lehrjahr || '')
            );
            
            // Add remove button
            const removeCell = $('<td>');
            const removeButton = $('<button>')
                .text('Entfernen')
                .addClass('btn btn-danger btn-sm')
                .on('click', function() {
                    row.fadeOut(300, function() {
                        $(this).remove();
                        showToast('Azubi wurde entfernt', 'warning');
                    });
                });
            
            removeCell.append(removeButton);
            row.append(removeCell);
            tbody.append(row);
        });

        table.append(thead, tbody);
        container.append(table);
        
        // CHANGED: Add summary with specific count
        container.prepend(
            $('<div>').addClass('alert alert-info mb-3')
                .html(`<strong>${azubiData.length} Azubis</strong> erfolgreich aus der lokalen CSV-Datei geladen`)
        );
    }

    function renderChart(statistics) {
        const years = Object.keys(statistics.data).sort();
        const labels = years.map(name => {
            const person = statistics.data[name];
            return `${name.split(' ')[0]} [${person.year}]`;
        });
        const primaryDuties = years.map(name => statistics.data[name].primary);
        const secondaryDuties = years.map(name => statistics.data[name].secondary);

        const ctx = $('#dutyChart')[0].getContext('2d');

        if (typeof Chart !== "undefined" && window.dutyChart instanceof Chart) {
            window.dutyChart.destroy();
        }

        window.dutyChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Dienst',
                    data: primaryDuties,
                    backgroundColor: '#007bff',
                    stack: 'stack0'
                }, {
                    label: 'Vertretung',
                    data: secondaryDuties,
                    backgroundColor: '#ababab',
                    stack: 'stack0'
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top'
                    },
                    tooltip: {
                        callbacks: {
                            label: function(tooltipItem) {
                                return tooltipItem.dataset.label + ': ' + tooltipItem.raw;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    function renderTable(statistics) {
        const sortedNames = Object.keys(statistics.data).sort();
        const tableBody = $('#statisticsTable');
        tableBody.empty();

        sortedNames.forEach(name => {
            const person = statistics.data[name];
            tableBody.append(`
                <tr>
                    <td>${name}</td>
                    <td>${person.primary}</td>
                    <td>${person.secondary}</td>
                    <td>${person.year}</td>
                </tr>
            `);
        });
    }

    function fetchStatistics() {
        $.get('/admin/get-statistics', function (statistics) {
            $('#lastUpdate').html('Letztes Update: <strong>' + statistics.timestamp + '</strong> 🎉');
            renderChart(statistics);
            renderTable(statistics);
        }).fail(function() {
            showToast('Fehler beim Laden der Statistiken', 'error');
        });
    }

    $('#runUpdate').on('click', function () {
        const $button = $(this);
        $button.prop('disabled', true).html('⏳ Wird aktualisiert...');
        
        $.get('/admin/generate-plan', function () {
            showToast('Plan wurde geupdated!', 'success');
            fetchStatistics();
        }).fail(function() {
            showToast('Fehler beim Update des Plans', 'error');
        }).always(function() {
            $button.prop('disabled', false).html('🔄 Update Plan');
        });
    });

    // CHANGED: Initialize - now automatically loads local CSV on startup
    loadLocalCSV(); // CHANGED: Call local CSV loader instead of file input setup
    fetchStatistics();
});
</script>
</body>
</html>